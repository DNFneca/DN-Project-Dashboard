type Query {
    allPeople: [Person]
    person(id: ID!): Person
    projectsByPersonId(personId: ID!): [Person!]!
    totalTasks: Int
    allTasks: [Task]
    task(id: ID!): Task
    allProjects: [Project]
    allSprints: [Sprint]
    me: Person
    sprint(id: ID!): Sprint
}

type Mutation {
    login(username: String!, password: String!): AuthResponse!
    register(username: String!, password: String!, email: String!): AuthResponse!
    logout: AuthResponse!
    validateToken(token: String!): AuthResponse!
    newPerson(name: String!, position: String!, managerId: ID, taskId: ID): Person
    newTask(title: String!, description: String!, donePercentage: Boolean): Task
    createNewProject(name: String!, ownerId: ID!, description: String): Project
    newTeam(name: String!, description: String, teamLeadId: ID, memberIds: [ID], sprintId: ID): Team
    newSprint(name: String!, description: String, goal: String, projectId: ID, startDate: String, endDate: String, teamIds: [ID], taskIds: [ID]): Sprint
    addPersonToProject(personId: ID!, projectId: ID!): Project
}

type AuthResponse {
    token: String
    username: String
    message: String
}

type Sprint {
    id: ID!
    name: String!
    description: String
    goal: String
    startDate: String
    endDate: String
    pointsDone: Float
    storyPoints: Float
    project: Project
    teams: [Team]
    tasks: [Task]
}

type Team {
    id: ID!
    name: String!
    description: String
    teamLead: Person
    members: [Person]
}

type Project {
    id: ID!
    name: String!
    description: String
    employees: [Person]
    sprints: [Sprint]
    teams: [Team]
}

type Person {
    id: ID!
    position: String!
    name: String!
    manager: Person
    task: Task
    team: Team
}

type Task {
    id: ID!
    title: String!
    description: String!
    donePercentage: Float!
    assignees: [Person!]!
}